```haskell
applySolution :: (Reflex t, MonadHold t m)
              => Event t Int
              -> m (Behavior t Int, Behavior t Int)
applySolution eIn = do





  pure (_ , _ )
```
 
We need to start with some `Event` wrangling.
=====
```haskell
applySolution :: (Reflex t, MonadHold t m)
              => Event t Int
              -> m (Behavior t Int, Behavior t Int)
applySolution eIn = do
  let
    e2 = (`div` 2) <$> eIn
    e3 = (`div` 3) <$> eIn
    
    
  pure (_ , _ )
```
 
We can get away with just dividing the input `Event` by 2 and 3 ...
=====
```haskell
applySolution :: (Reflex t, MonadHold t m)
              => Event t Int
              -> m (Behavior t Int, Behavior t Int)
applySolution eIn = do
  let
    e2 = (`div` 2) <$> eIn
    e3 = (`div` 3) <$> eIn
  h2 <- hold 0 e2
  h3 <- hold 0 e3
  pure (_ , _ )
```
 
... using `hold` to turn those `Event`s into `Behavior`s ...
=====
```haskell
applySolution :: (Reflex t, MonadHold t m)
              => Event t Int
              -> m (Behavior t Int, Behavior t Int)
applySolution eIn = do
  let
    e2 = (`div` 2) <$> eIn
    e3 = (`div` 3) <$> eIn
  h2 <- hold 0 e2
  h3 <- hold 0 e3
  pure (h2, h3)
```
 
... and then returning the pair of `Behavior`s.
=====
```haskell
applySolution :: (Reflex t, MonadHold t m)
              => Event t Int
              -> m (Behavior t Int, Behavior t Int)
applySolution eIn = do
  let
    e2 = (`div` 2) <$> eIn
    e3 = (`div` 3) <$> eIn
  (,) <$>
    hold 0 ((`div` 2) <$> eIn) <*>
    hold 0 ((`div` 3) <$> eIn)
```
 
We can use `Applicative` style if we want ...
=====
```haskell
applySolution :: (Reflex t, MonadHold t m)
              => Event t Int
              -> m (Behavior t Int, Behavior t Int)
applySolution eIn = do



  (,) <$>
    hold 0 ((`div` 2) <$> eIn) <*>
    hold 0 ((`div` 3) <$> eIn)
```
 
... and could even inline the `Event` definitions.
=====
```haskell
applySolution :: (Reflex t, MonadHold t m)
              => Event t Int
              -> m (Behavior t Int, Behavior t Int)
applySolution eIn = do
  let
    multiple n =
      (== 0) . (`mod` n)
    downsample n =
      fmap (`div` n) . ffilter (multiple n)
  b2 <- hold 0 $ downsample 2 eIn
  b3 <- hold 0 $ downsample 3 eIn
  pure (b2 , b3)
```
 
We can also create a version that updates less frequently, but the reasons we might want such a thing have not been revealed yet...
