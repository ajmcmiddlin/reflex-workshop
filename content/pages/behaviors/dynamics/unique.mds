```haskell
uniqueSolution :: (Reflex t, MonadFix m, MonadHold t m)
               => Dynamic t (Int, Int)
               -> m (Dynamic t Int, Dynamic t Int)
uniqueSolution dIn =



  pure (fst <$> dIn, snd <$> dIn)
```
 
We can do this in two moves.
=====
```haskell
uniqueSolution :: (Reflex t, MonadFix m, MonadHold t m)
               => Dynamic t (Int, Int)
               -> m (Dynamic t Int, Dynamic t Int)
uniqueSolution dIn = do
  let
    dOut1 =              fst <$> dIn
    dOut2 =              snd <$> dIn
  pure (dOut1      , dOut2      )
```
 
We give the output dynamics names ...
=====
```haskell
uniqueSolution :: (Reflex t, MonadFix m, MonadHold t m)
               => Dynamic t (Int, Int)
               -> m (Dynamic t Int, Dynamic t Int)
uniqueSolution dIn = do

  dOut1 <- holdUniqDyn $ fst <$> dIn
  dOut2 <- holdUniqDyn $ snd <$> dIn
  pure (dOut1      , dOut2      )
```
 
... and we wrap them in `holdUniqDyn`.

